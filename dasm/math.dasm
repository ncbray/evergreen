struct Expr {
}

struct IntLiteral implements Expr {
  Text string
}

struct BinaryOp implements Expr {
  Left Expr
  Op string
  Right Expr
}

func S () {
  /[ \t\r\n]*/;
}

func Digits (string) {
  return /[0-9]+/;
}

func Integer (IntLiteral) {
  define v call Digits;
  call S;
  return cons IntLiteral(Text: v);
}

test Integer Simple "123"
  IntLiteral{
    Text: "123"
  }

func Add (Expr) {
  var e Expr;
  assign e call Integer;
  star {
    /[+]/;
    call S;
    define r call Integer;
    assign e cons BinaryOp(Left: e, Op: "+", Right: r);
  }
  return (e);
}

test Add Zero "7"
  IntLiteral{
    Text: "7"
  }

test Add One "8+9"
  BinaryOp{
    Left: IntLiteral{
      Text: "8"
    }
    Op: "+"
    Right: IntLiteral{
      Text: "9"
    }
  }

test Add Two "11 + 12 + 13"
  BinaryOp{
    Left: BinaryOp{
      Left: IntLiteral{
        Text: "11"
      }
      Op: "+"
      Right: IntLiteral{
        Text: "12"
      }
    }
    Op: "+"
    Right: IntLiteral{
      Text: "13"
    }
  }