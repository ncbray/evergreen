struct TextMatch {
}

struct RuneFilter {
  Min rune
  Max rune
}

struct RuneMatch implements TextMatch {
  Filters []RuneFilter
}

struct MatchSequence implements TextMatch {
  Matches []TextMatch
}

struct MatchChoice implements TextMatch {
  Matches []TextMatch
}

struct MatchRepeat implements TextMatch {
  Match TextMatch
  Min int
}

struct Token {
}

struct IntTok implements Token {
  Text string
  Value int
}

struct StrTok implements Token {
  Text string
  Value string
}

struct RuneTok implements Token {
  Text string
  Value rune
}

func S () {
  star {
    define c read;
    if ne c ' ' {
      if ne c '\t' {
        if ne c '\r' {
          if ne c '\n' {
            fail;
          }
        }
      }
    }
  }
}

func Ident (string) {
  define text /[a-zA-Z_][a-zA-Z_0-9]*/;
  call S;
  return text;
}

func Int (IntTok) {
  define text /[0-9]+/;
  call S;
  return cons IntTok(Text: text);
}

func EscapedChar (rune) {
  define c read;
  if eq c 'a' {
    return '\a';
  }
  if eq c 'b' {
    return '\b';
  }
  if eq c 'f' {
    return '\f';
  }
  if eq c 'n' {
    return '\n';
  }
  if eq c 'r' {
    return '\r';
  }
  if eq c 't' {
    return '\t';
  }
  if eq c 'v' {
    return '\v';
  }
  if eq c '\\' {
    return '\\';
  }
  if eq c '\'' {
    return '\'';
  }
  if eq c '"' {
    return '"';
  }
  fail;
}

func StrT (StrTok) {
  define text slice {
    /["]/;
    star {
      define c read;
      if eq c '"' {
        fail;
      }
      if eq c '\\' {
        call EscapedChar;
      }
    }
    /["]/;
  }
  call S;
  return cons StrTok(Text: text);
}

func Rune (RuneTok) {
  define text slice {
    /[']/;
    define c read;
    if eq c '\\' {
      call EscapedChar;
    }
    /[']/;
  }
  call S;
  return cons RuneTok(Text: text);
}

func MatchExpr (TextMatch) {
  /[/]/;
  call S;
  define e call Choice;
  /[/]/;
  call S;
  return e;
}

test Ident Alpha "a_B_c "
  "a_B_c"

test Ident AlphaNum "a_1_7  "
  "a_1_7"

test Int Num "1234567890  "
  IntTok{Text: "1234567890"}

test StrT Str "\"hello, world\"  "
  StrTok{Text: "\"hello, world\""}

test Rune Rune "'a'  "
  RuneTok{Text: "'a'"}


func ParseRuneFilterRune (rune) {
  define c read;
  if eq c ']' {
    fail;
  }
  if eq c '-' {
    fail;
  }
  if eq c '\\' {
    question {
      return call EscapedChar;
    }
    return read;
  }
  return c;
}

func ParseRuneFilter (RuneFilter) {
  define min call ParseRuneFilterRune;
  define max min;
  question {
    /[\-]/;
    assign max call ParseRuneFilterRune;
  }
  return (cons RuneFilter(Min: min Max: max));
}

func MatchRune (RuneMatch) {
  /[\[]/;
  define filters conl []RuneFilter()
  star {
    append filters call ParseRuneFilter;
  }
  /[\]]/;
  call S;
  return (cons RuneMatch(Filters: filters))
}

func Atom (TextMatch) {
  question {
    return (call MatchRune);
  }
  /[(]/;
  define e call Choice;
  /[)]/;
  return (e);
}

func Postfix (TextMatch) {
  define e call Atom;
  question {
    define c read;
    if eq c '*' {
      call S;
      return (cons MatchRepeat(Match: e Min: 0));
    }
    if eq c '+' {
      call S;
      return (cons MatchRepeat(Match: e Min: 1));
    }
    if eq c '?' {
      call S;
      return (cons MatchChoice(Matches: conl []TextMatch(e cons MatchSequence(Matches: conl []TextMatch()))));
    }
    fail;
  }
  return (e);
}

func Sequence (TextMatch) {
  var e TextMatch = call Postfix;
  question {
    define l conl []TextMatch(e)
    plus {
      append l call Postfix;
    }
    assign e cons MatchSequence(Matches: l)
  }
  return (e)
}

func Choice (TextMatch) {
  var e TextMatch = call Sequence;
  question {
    define l conl []TextMatch(e)
    plus {
      /[|]/;
      call S;
      append l call Sequence;
    }
    assign e cons MatchChoice(Matches: l)
  }
  return (e)
}


test Choice One "[pq]"
  RuneMatch {
    Filters: []RuneFilter {
      RuneFilter {
        Min: 'p'
        Max: 'p'
      }
      RuneFilter {
        Min: 'q'
        Max: 'q'
      }
    }
  }

test Choice Escape "[\\]\\n]"
  RuneMatch {
    Filters: []RuneFilter {
      RuneFilter {
        Min: ']'
        Max: ']'
      }
      RuneFilter {
        Min: '\n'
        Max: '\n'
      }
    }
  }


test Choice Three "[a][b][c]"
  MatchSequence {
    Matches: []TextMatch {
      RuneMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: 'a'
            Max: 'a'
          }
        }
      }
      RuneMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: 'b'
            Max: 'b'
          }
        }
      }
      RuneMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: 'c'
            Max: 'c'
          }
        }
      }
    }
  }

test Choice Repeat "[0-9] + "
  MatchRepeat {
    Match: RuneMatch {
      Filters: []RuneFilter {
        RuneFilter {
          Min: '0'
          Max: '9'
        }
      }
    }
    Min: 1
  }

test Choice Question "[*]?"
  MatchChoice {
    Matches: []TextMatch {
      RuneMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: '*'
            Max: '*'
          }
        }
      }
      MatchSequence {
        Matches: []TextMatch{}
      }
    }
  }

test Choice Complex "[a]([b]|[c])|[d]"
  MatchChoice {
    Matches: []TextMatch {
      MatchSequence {
        Matches: []TextMatch{
          RuneMatch {
            Filters: []RuneFilter {
              RuneFilter {
                Min: 'a'
                Max: 'a'
               }
            }
          }
          MatchChoice {
            Matches: []TextMatch {
              RuneMatch {
                Filters: []RuneFilter {
                  RuneFilter {
                    Min: 'b'
                    Max: 'b'
                  }
                }
              }
              RuneMatch {
                Filters: []RuneFilter {
                  RuneFilter {
                    Min: 'c'
                    Max: 'c'
                  }
                }
              }
            }
          }
        }
      }
      RuneMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: 'd'
            Max: 'd'
          }
        }
      }
    }
  }
