struct TextMatch {
}

struct RuneFilter {
  Min rune
  Max rune
}

struct RuneRangeMatch implements TextMatch {
  Invert bool
  Filters []RuneFilter
}

struct StringLiteralMatch implements TextMatch {
  Value string
}

struct MatchSequence implements TextMatch {
  Matches []TextMatch
}

struct MatchChoice implements TextMatch {
  Matches []TextMatch
}

struct MatchRepeat implements TextMatch {
  Match TextMatch
  Min int
}

struct ASTExpr {
}

struct RuneLiteral implements ASTExpr {
  Text string
  Value rune
}

struct StringLiteral implements ASTExpr {
  Text string
  Value string
}

struct IntLiteral implements ASTExpr {
  Text string
  Value int
}

struct BoolLiteral implements ASTExpr {
  Text string
  Value bool
}

func S () {
  /[ \t\r\n]*/;
}

func Ident (string) {
  text := /[a-zA-Z_][a-zA-Z_0-9]*/;
  call S;
  return text;
}

func DecodeInt (int) {
    var value int;
    plus {
      digit := - coerce int $[0-9] coerce int '0';
      value = + * value 10 digit;
    }
    return value;
}

func EscapedChar (rune) {
  choose {
    /[a]/;
    return '\a';
  } or {
    /[b]/;
    return '\b';
  } or {
    /[f]/;
    return '\f';
  } or {
    /[n]/;
    return '\n';
  } or {
    /[r]/;
    return '\r';
  } or {
    /[t]/;
    return '\t';
  } or {
    /[v]/;
    return '\v';
  } or {
    /[\\]/;
    return '\\';
  } or {
    /[']/;
    return '\'';
  } or {
    /["]/;
    return '"';
  }
}

func DecodeString (string) {
  /["]/;
  contents := []rune{}
  star {
    choose {
      append contents $[^"\\];
    } or {
      /[\\]/;
      append contents call EscapedChar;
    }
  }
  /["]/;
  return coerce string contents;
}

func DecodeRune (rune) {
  var value rune;
  /[']/;
  choose {
    value = $[^\\'];
  } or {
    /[\\]/;
    value = call EscapedChar;
  }
  /[']/;
  return value;
}

func DecodeBool (bool) {
  choose {
    /"true"/;
    return true;
  } or {
    /"false"/;
    return false;
  }
}

func Literal (ASTExpr) {
  choose {
    var value rune;
    text := slice {
      value = call DecodeRune;
    }
    call S;
    return RuneLiteral{Text: text, Value: value};
  } or {
    var value string;
    text := slice {
      value = call DecodeString;
    }
    call S;
    return StringLiteral{Text: text, Value: value};
  } or {
    var value int;
    text := slice {
      value = call DecodeInt;
    }
    call S;
    return IntLiteral{Text: text, Value: value};
  } or {
    var value bool;
    text := slice {
      value = call DecodeBool;
    }
    call S;
    return BoolLiteral{Text: text, Value: value};
  }
}

func BinaryOperator (string) {
  op := /[+\-*/]|([<>][=]?)|([!=][=])/;
  call S;
  return op;
}


struct StringMatch implements ASTExpr {
   Match TextMatch
}

struct RuneMatch implements ASTExpr {
   Match RuneRangeMatch
}

func StringMatchExpr (StringMatch) {
  /[/]/;
  call S;
  e := call ParseMatchChoice;
  /[/]/;
  call S;
  return StringMatch{Match: e};
}

func RuneMatchExpr (RuneMatch) {
  /[$]/;
  call S;
  e := call MatchRune;
  return RuneMatch{Match: e};
}


test Ident Alpha "a_B_c "
  "a_B_c"

test Ident AlphaNum "a_1_7  "
  "a_1_7"

test Literal Num "1234567890  "
  IntLiteral{
    Text: "1234567890"
    Value: 1234567890
 }

test Literal Str "\"hello, world\\n\"  "
  StringLiteral{
    Text: "\"hello, world\\n\""
    Value: "hello, world\n"
  }

test Literal Rune "'a'  "
  RuneLiteral{
    Text: "'a'"
    Value: 'a'
  }

test Literal EscapedRune "'\\n'  "
  RuneLiteral{
    Text: "'\\n'"
    Value: '\n'
  }

struct ASTType {
}

struct Fake implements ASTType {
}

struct ASTTypeRef {
}

struct TypeRef implements ASTTypeRef {
  Name string
  T ASTType
}

struct ListTypeRef implements ASTTypeRef {
  Type ASTTypeRef
  T ASTType
}

func ParseStructTypeRef (TypeRef) {
    return TypeRef{Name: call Ident};
}

func ParseListTypeRef (ListTypeRef) {
    /[\[][\]]/;
    return ListTypeRef{Type: call ParseTypeRef};
}


func ParseTypeRef (ASTTypeRef) {
  choose {
    return call ParseStructTypeRef;
  } or {
    return call ParseListTypeRef;
  }
}

test ParseTypeRef ListOfList "[][]Foo"
  ListTypeRef{
    Type: ListTypeRef{
      Type: TypeRef{
        Name: "Foo"
      }
    }
  }

struct Destructure {
}

struct DestructureValue implements Destructure {
  Expr ASTExpr
}

struct DestructureField {
  Name string
  Destructure Destructure
}

struct DestructureStruct implements Destructure {
  Type TypeRef
  Args []DestructureField
}

struct DestructureList implements Destructure {
  Type ListTypeRef
  Args []Destructure
}

func ParseDestructure (Destructure) {
  choose {
    t := call ParseStructTypeRef;
    /[{]/;
    call S;
    fields := []DestructureField{};
    star {
      name := call Ident;
      /[:]/;
      call S;
      d := call ParseDestructure;
      append fields DestructureField{Name: name, Destructure: d};
    }
    /[}]/;
    call S;
    return DestructureStruct{Type: t, Args: fields};
  } or {
    t := call ParseListTypeRef;
    /[{]/;
    call S;
    fields := []Destructure{};
    star {
      append fields call ParseDestructure;
    }
    /[}]/;
    call S;
    return DestructureList{Type: t, Args: fields};
  } or {
    return DestructureValue{Expr: call Literal}
  }
}

test ParseDestructure Compound "[]Foo { Bar { Baz: 1 Biz : 'x'} } "
  DestructureList {
    Type: ListTypeRef {
      Type: TypeRef {
        Name: "Foo"
      }
    }
    Args: []Destructure {
      DestructureStruct {
        Type: TypeRef {
          Name: "Bar"
        }
        Args: []DestructureField {
          DestructureField {
            Name: "Baz"
            Destructure: DestructureValue {
              Expr: IntLiteral {
                Value: 1
              }
            }
          }
          DestructureField {
            Name: "Biz"
            Destructure: DestructureValue {
              Expr: RuneLiteral {
                Value: 'x'
              }
            }
          }
        }
      }
    }
  }

func ParseRuneFilterRune (rune) {
  choose {
    return $[^\]\-\\];
  } or {
    /[\\]/;
    choose {
      return call EscapedChar;
    } or {
      return $[^];
    }
  }
}

func ParseRuneFilter (RuneFilter) {
  min := call ParseRuneFilterRune;
  max := min;
  question {
    /[\-]/;
    max = call ParseRuneFilterRune;
  }
  return RuneFilter{Min: min, Max: max};
}

func MatchRune (RuneRangeMatch) {
  /[\[]/;
  invert := false;
  filters := []RuneFilter{};
  question {
    /[\^]/;
    invert = true;
  }
  star {
    append filters call ParseRuneFilter;
  }
  /[\]]/;
  call S;
  return RuneRangeMatch{Invert: invert, Filters: filters};
}

func Atom (TextMatch) {
  choose {
    return call MatchRune;
  } or {
    value := call DecodeString;
    call S;
    return StringLiteralMatch{Value: value};
  } or {
    /[(]/;
    e := call ParseMatchChoice;
    /[)]/;
    return e;
  }
}

func Postfix (TextMatch) {
  e := call Atom;
  choose {
    /[*]/;
    call S;
    return MatchRepeat{Match: e, Min: 0};
  } or {
    /[+]/;
    call S;
    return MatchRepeat{Match: e, Min: 1};
  } or {
    /[?]/;
    call S;
    return MatchChoice{Matches: []TextMatch{e, MatchSequence{Matches: []TextMatch{}}}};
  } or {
    return e;
  }
}

func Sequence (TextMatch) {
  e := call Postfix;
  choose {
    l := []TextMatch{e}
    plus {
      append l call Postfix;
    }
    return MatchSequence{Matches: l};
  } or {
    return e;
  }
}

func ParseMatchChoice (TextMatch) {
  e := call Sequence;
  choose {
    l := []TextMatch{e};
    plus {
      /[|]/;
      call S;
      append l call Sequence;
    }
    return MatchChoice{Matches: l};
  } or {
    return e;
  }
}


test ParseMatchChoice One "[pq]"
  RuneRangeMatch {
    Invert: false
    Filters: []RuneFilter {
      RuneFilter {
        Min: 'p'
        Max: 'p'
      }
      RuneFilter {
        Min: 'q'
        Max: 'q'
      }
    }
  }

test ParseMatchChoice Invert "[^.]"
  RuneRangeMatch {
    Invert: true
    Filters: []RuneFilter {
      RuneFilter {
        Min: '.'
        Max: '.'
      }
    }
  }

test ParseMatchChoice Escape "[\\]\\n]"
  RuneRangeMatch {
    Filters: []RuneFilter {
      RuneFilter {
        Min: ']'
        Max: ']'
      }
      RuneFilter {
        Min: '\n'
        Max: '\n'
      }
    }
  }


test ParseMatchChoice Three "[a][b][c]"
  MatchSequence {
    Matches: []TextMatch {
      RuneRangeMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: 'a'
            Max: 'a'
          }
        }
      }
      RuneRangeMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: 'b'
            Max: 'b'
          }
        }
      }
      RuneRangeMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: 'c'
            Max: 'c'
          }
        }
      }
    }
  }

test ParseMatchChoice Repeat "[0-9] + "
  MatchRepeat {
    Match: RuneRangeMatch {
      Filters: []RuneFilter {
        RuneFilter {
          Min: '0'
          Max: '9'
        }
      }
    }
    Min: 1
  }

test ParseMatchChoice Question "[*]?"
  MatchChoice {
    Matches: []TextMatch {
      RuneRangeMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: '*'
            Max: '*'
          }
        }
      }
      MatchSequence {
        Matches: []TextMatch{}
      }
    }
  }

test ParseMatchChoice Complex "[a]([b]|[c])|[d]"
  MatchChoice {
    Matches: []TextMatch {
      MatchSequence {
        Matches: []TextMatch{
          RuneRangeMatch {
            Filters: []RuneFilter {
              RuneFilter {
                Min: 'a'
                Max: 'a'
               }
            }
          }
          MatchChoice {
            Matches: []TextMatch {
              RuneRangeMatch {
                Filters: []RuneFilter {
                  RuneFilter {
                    Min: 'b'
                    Max: 'b'
                  }
                }
              }
              RuneRangeMatch {
                Filters: []RuneFilter {
                  RuneFilter {
                    Min: 'c'
                    Max: 'c'
                  }
                }
              }
            }
          }
        }
      }
      RuneRangeMatch {
        Filters: []RuneFilter {
          RuneFilter {
            Min: 'd'
            Max: 'd'
          }
        }
      }
    }
  }

struct If implements ASTExpr {
  Expr ASTExpr
  Block []ASTExpr
}

struct Repeat implements ASTExpr {
  Block []ASTExpr
  Min int
}

struct Choice implements ASTExpr {
  Blocks [][]ASTExpr
}

struct Optional implements ASTExpr {
  Block []ASTExpr
}

struct Slice implements ASTExpr {
  Block []ASTExpr
}

struct Assign implements ASTExpr {
  Expr ASTExpr
  Name string
  Info int
  Type ASTTypeRef
  Define bool
}

struct GetName implements ASTExpr {
  Name string
  Info int
}

struct NamedExpr {
  Name string
  Expr ASTExpr
}

struct Construct implements ASTExpr {
  Type TypeRef
  Args []NamedExpr
}

struct ConstructList implements ASTExpr {
  Type ListTypeRef
  Args []ASTExpr
}

struct Coerce implements ASTExpr {
  Type ASTTypeRef
  Expr ASTExpr
}

struct Call implements ASTExpr {
  Name string
  T ASTType
}

struct Fail implements ASTExpr {
}

struct Append implements ASTExpr {
  List ASTExpr
  Expr ASTExpr
  T ASTType
}

struct Return implements ASTExpr {
  Exprs []ASTExpr
}

struct BinaryOp implements ASTExpr {
  Left ASTExpr
  Op string
  Right ASTExpr
  T ASTType
}

func ParseExprList ([]ASTExpr) {
  exprs := []ASTExpr{}
  question {
    append exprs call ParseExpr;
    star {
      /[,]/;
      call S;
      append exprs call ParseExpr;
    }
  }
  return exprs;
}

func ParseNamedExpr (NamedExpr) {
  name := call Ident;
  /[:]/;
  call S;
  return NamedExpr{Name: name, Expr: call ParseExpr};
}

func ParseNamedExprList ([]NamedExpr) {
  exprs := []NamedExpr{}
  question {
    append exprs call ParseNamedExpr;
    star {
      /[,]/;
      call S;
      append exprs call ParseNamedExpr;
    }
  }
  return exprs;
}


func ParseTypeList ([]ASTTypeRef) {
  /[(]/;
  call S;
  types := []ASTTypeRef{}
  question {
    append types call ParseTypeRef;
    star {
      /[,]/;
      call S;
      append types call ParseTypeRef;
    }
  }
  /[)]/;
  call S;
  return types;
}

func ParseExpr (ASTExpr) {
  choose {
    return call Literal;
  } or {
    var count int
    choose {
      /"star"/;
    } or {
      /"plus"/;
      count = 1;
    }
    call S;
    block := call ParseCodeBlock;
    return Repeat{Block: block, Min: count};
  } or {
    /"choose"/;
    call S;
    blocks := [][]ASTExpr{call ParseCodeBlock}
    star {
      /"or"/;
      call S;
      append blocks call ParseCodeBlock;
    }
    return Choice{Blocks: blocks};
  } or {
    /"question"/;
    call S;
    block := call ParseCodeBlock;
    return Optional{Block: block};
  } or {
    /"slice"/;
    call S;
    block := call ParseCodeBlock;
    return Slice{Block: block};
  } or {
    /"if"/;
    call S;
    expr := call ParseExpr;
    block := call ParseCodeBlock;
    return If{Expr: expr, Block: block};
  } or {
    /"var"/;
    call S;
    name := call Ident;
    t := call ParseTypeRef;
    var expr ASTExpr;
    question {
      /[=]/;
      call S;
      expr = call ParseExpr; 
    }
    return Assign{Expr: expr, Name: name, Type: t, Define: true};
  } or {
    /"call"/;
    call S;
    name := call Ident;
    return Call{Name: name};
  } or {
    /"fail"/;
    call S;
    return Fail{};
  } or {
    /"coerce"/;
    call S;
    t := call ParseTypeRef;
    e := call ParseExpr;
    return Coerce{Type: t, Expr: e};
  } or {
    /"append"/;
    call S;
    name := call Ident;
    expr := call ParseExpr;
    return Assign{
      Expr: Append{
        List: GetName{Name: name},
        Expr: expr
      },
      Name: name
    };
  } or {
    /"return"/;
    call S;
    choose {
      /[(]/;
      call S;
      exprs := call ParseExprList;
      /[)]/;
      call S;
      return Return{Exprs: exprs};
    } or {
      return Return{Exprs: []ASTExpr{call ParseExpr}}
    } or {
      return Return{Exprs: []ASTExpr{}}
    }
  } or {
    op := call BinaryOperator;
    l := call ParseExpr;
    r := call ParseExpr;
    return BinaryOp{Left: l, Op: op, Right: r};
  } or {
    t := call ParseStructTypeRef;
    /[{]/;
    call S;
    args := call ParseNamedExprList;
    /[}]/;
    call S;
    return Construct{Type: t, Args: args};
  } or {
    t := call ParseListTypeRef;
    /[{]/;
    call S;
    args := call ParseExprList;
    /[}]/;
    call S;
    return ConstructList{Type: t, Args: args};
  } or {
    return call StringMatchExpr;
  } or {
    return call RuneMatchExpr;
  } or {
    name := call Ident;
    choose {
      var defined bool;
      choose {
        /":="/;
        defined = true;
      } or {
        /"="/;
      }
      call S;
      expr := call ParseExpr;
      return Assign{Expr: expr, Name: name, Define: defined};
    } or {
      return GetName{Name: name};
    }
  }
}

func ParseCodeBlock([]ASTExpr) {
  /[{]/;
  call S;
  exprs := []ASTExpr{};
  star {
    append exprs call ParseExpr;
    star {
      /[;]/;
      call S;
    }
  }
  /[}]/;
  call S;
  return exprs;
}

test ParseExpr BinaryOp "+ 1 2"
  BinaryOp {
    Left: IntLiteral {
      Value: 1
    }
    Op: "+"
    Right: IntLiteral {
      Value: 2
    }
  }

test ParseExpr Assign "foo = 1"
  Assign {
    Name: "foo"
    Expr: IntLiteral {
      Value: 1
    }
    Define: false
  }

test ParseExpr Define "foo := 1"
  Assign {
    Name: "foo"
    Expr: IntLiteral {
      Value: 1
    }
    Define: true
  }

test ParseExpr Construct "Foo{ Bar: 1} "
  Construct {
    Type: TypeRef {
      Name: "Foo"
    }
    Args: []NamedExpr {
      NamedExpr{
        Name: "Bar"
        Expr: IntLiteral {
          Value: 1
        }
      }
    }
  }

test ParseExpr ConstructList "[]Foo{ 1 } "
  ConstructList {
    Type: ListTypeRef{
      Type: TypeRef {
        Name: "Foo"
      }
    }
    Args: []ASTExpr {
      IntLiteral {
        Value: 1
      }
    }
  }
