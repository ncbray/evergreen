test Basic ParseTypeDecl() "type Foo struct {bar i32; baz u32}"
  TypeDecl {
    Name: Token{Text: "Foo"}
    Decl: StructDecl {
      Fields: []FieldDecl {
        FieldDecl {
          Name: Token{Text: "bar"}
          Type: NamedTypeRef{Name: Token{Text: "i32"}}
        }
        FieldDecl {
          Name: Token{Text: "baz"}
          Type: NamedTypeRef{Name: Token{Text: "u32"}}
        }
      }
    }
  }

test SumAlias ParseTypeDecl() "type Foo = Bar | []Baz;"
  TypeDecl {
    Name: Token{Text: "Foo"}
    Decl: TypeAliasDecl {
      Type: SumTypeRef{
        Types: []TypeRef{
          NamedTypeRef{Name: Token{Text: "Bar"}}
          ListTypeRef{Type: NamedTypeRef{Name: Token{Text: "Baz"}}}
        }
      }
    }
  }

test SimpleFunc ParseFuncDecl() "func Foo() {return 12 + 345;}"
  FuncDecl {
    Name: Token{Text: "Foo"}
    Body: []Stmt{
      Return{
        Expr: InfixOp{
          Left: IntLiteral{
            Text: "12"
          }
          Op: Token{Text: "+"}
          Right: IntLiteral{
            Text: "345"
          }
	}
      }
    }
  }

test Struct ParseExpr() "Foo{ Bar: 1, Baz: Biz { }, Boz: 2 }"
  CreateStruct {
    Type: NamedTypeRef {Name: Token{Text: "Foo"}}
    Args: []NamedExpr {
      NamedExpr {
        Name: Token{Text: "Bar"}
	Value: IntLiteral{Text: "1"}
      }
      NamedExpr {
        Name: Token{Text: "Baz"}
	Value: CreateStruct {
          Type: NamedTypeRef {Name: Token{Text: "Biz"}}
          Args: []NamedExpr {}
        }
      }
      NamedExpr {
        Name: Token{Text: "Boz"}
	Value: IntLiteral{Text: "2"}
      }
    }
  }

test GetAttr ParseExpr() "Foo.Bar.Baz"
  GetAttr {
    Expr: GetAttr {
      Expr: GetName {
        Name: Token{Text: "Foo"}
      }
      Attr: Token{Text: "Bar"}
    }
    Attr: Token{Text: "Baz"}
  }

test GetIndex ParseExpr() "Foo[0][1]"
  GetIndex {
    Expr: GetIndex {
      Expr: GetName {
        Name: Token{Text: "Foo"}
      }
      Index: IntLiteral{Text: "0"}
    }
    Index: IntLiteral{Text: "1"}
  }

test AssignName ParseExpr() "foo = bar"
  AssignOp {
    Target: GetName{Name: Token{Text: "foo"}}
    Op: Token{Text: "="}
    Value: GetName{Name: Token{Text: "bar"}}
  }

test WithSemis ParseFuncDecl() "func Foo() i32 {a = 123; return a;}"
  FuncDecl {
    Name: Token{Text: "Foo"}
    ReturnTypes: []TypeRef{
      NamedTypeRef{Name: Token{Text: "i32"}}
    }
    Body: []Stmt{
      AssignOp{
        Target: GetName{Name: Token{Text: "a"}}
        Op: Token{Text: "="}
        Value: IntLiteral{Text: "123"}
      }
      Return{
        Expr: GetName{Name: Token{Text: "a"}}
      }
    }
  }

test WithoutSemis ParseFuncDecl() "func Foo() i32 {a = 123\nreturn a}"
  FuncDecl {
    Name: Token{Text: "Foo"}
    ReturnTypes: []TypeRef{
      NamedTypeRef{Name: Token{Text: "i32"}}
    }
    Body: []Stmt{
      AssignOp{
        Target: GetName{Name: Token{Text: "a"}}
        Op: Token{Text: "="}
        Value: IntLiteral{Text: "123"}
      }
      Return{
        Expr: GetName{Name: Token{Text: "a"}}
      }
    }
  }