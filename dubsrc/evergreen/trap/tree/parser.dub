func EOL() {
  /"\n"|"\r\n"|"\r"/
}

func SingleLineComment() {
  /"//" [^\n\r]*/
}

func S() {
  star {
    choose {
      /[ \t]/
    } or {
      EOL()
    } or {
      SingleLineComment()
    }
  }
}

func EOSInsertionPoint() {
  /[ \t]*/
}

func EOS() {
  choose {
    S()
    /[;]|&[)}]|![^]/
  } or {
    question {
      SingleLineComment()
    }
    EOL()
  }
}

func EndKeyword() {
  /![a-zA-Z_0-9]/
}

func NotReserved() {
  /!(("type"|"struct") ![a-zA-Z_0-9])/
}

func Id() Token {
  p := position()
  NotReserved();
  text := /[a-zA-Z_][a-zA-Z_0-9]*/
  return Token{Pos: p, Text: text}
}

func ParseNamedTypeRef() TypeRef {
  name := Id()
  return NamedTypeRef {
    Name: name
  }
}

func ParseListTypeRef() TypeRef {
  choose {
    /"[]"/;
    S();
    return ListTypeRef{Type: ParseListTypeRef()}
  } or {
    return ParseNamedTypeRef()
  }
}

func ParseSumTypeRef() TypeRef {
  t := ParseListTypeRef()
  choose {
    types := []TypeRef{t}
    plus {
      S()
      /[|]/
      S()
      types = append(types, ParseListTypeRef())
    }
    return SumTypeRef{Types: types}
  } or {
    return t
  }
}

func ParseTypeRef() TypeRef {
  return ParseSumTypeRef()
}

func ParseField() FieldDecl {
  name := Id()
  S()
  type := ParseTypeRef()
  EOS()
  return FieldDecl {
    Name: name,
    Type: type
  }
}

func ParseFields() []FieldDecl {
  fields := []FieldDecl{}
  star {
    fields = append(fields, ParseField())
    S()
  }
  return fields
}

func ParseStructDecl() StructDecl {
  /"struct"/
  EndKeyword()
  S()
  /[{]/
  S()
  fields := ParseFields()
  S()
  /[}]/
  return StructDecl {
    Fields: fields
  }
}

func ParseTypeAliasDecl() TypeAliasDecl {
  /"="/
  S()
  t := ParseTypeRef()
  S()
  /[;]/
  return TypeAliasDecl{Type: t}
}

func ParseTypeDecl() TypeDecl {
  /"type"/
  EndKeyword()
  S()
  name := Id()
  S()
  var impl TypeImpl
  choose {
    impl = ParseStructDecl()
  } or {
    impl = ParseTypeAliasDecl()
  }
  return TypeDecl {
    Name: name,
    Decl: impl
  }
}

func ParseNamedExpr() NamedExpr {
  name := Id()
  S()
  /":"/
  S()
  value := ParseExpr()
  return NamedExpr {
    Name: name,
    Value: value
  }
}

func ParseExprList() []Expr {
  exprs := []Expr{}
  question {
    exprs = append(exprs, ParseExpr())
    star {
      S();
      /","/
      S()
      exprs = append(exprs, ParseExpr())
    }
    question {
      S();
      /","/
    }
  }
  return exprs
}

func ParseNamedExprList() []NamedExpr {
  exprs := []NamedExpr{}
  question {
    exprs = append(exprs, ParseNamedExpr())
    star {
      S();
      /","/
      S()
      exprs = append(exprs, ParseNamedExpr())
    }
    question {
      S();
      /","/
    }
  }
  return exprs
}

func ParseExprAtom() Expr {
  p := position()
  choose {
    text := /[0-9]+/
    return IntLiteral {
      Pos: p,
      Text: text
    }
  } or {
    t := ParseTypeRef()
    S()
    /"{"/;
    S();
    choose {
      args := ParseNamedExprList()
      S();
      /"}"/;
      return CreateStruct {
        Type: t,
        Args: args
      }
    } or {
      args := ParseExprList()
      S();
      /"}"/;
      return CreateList {
        Type: t,
        Args: args
      }
    }
  } or {
    name := Id()
    return GetName {
      Name: name
    }
  }
}

func ParseExprPostfix() Expr {
  expr := ParseExprAtom()
  star {
    S()
    choose {
      /"."/
      S()
      attr := Id()
      expr = GetAttr{Expr: expr, Attr: attr}
    } or {
      /"["/
      S()
      index := ParseExpr()
      S()
      /"]"/
      expr = GetIndex{Expr: expr, Index: index}
    }
  }
  return expr
}

func ParseAddOp() Token {
  p := position()
  op := /"+"/
  return Token {
    Pos: p,
    Text: op
  }
}

func ParseAddExpr() Expr {
  e := ParseExprPostfix()
  star {
    S()
    op := ParseAddOp()
    S()
    other := ParseExprPostfix()
    e = InfixOp{
      Left: e,
      Op: op,
      Right: other
    }
  }
  return e
}

func ParseAssignOp() Token {
  p := position()
  op := /"="/
  return Token {
    Pos: p,
    Text: op
  }
}

func ParseAssignExpr() Expr {
  e := ParseAddExpr()
  question {
    S()
    op := ParseAssignOp()
    S()
    other := ParseAssignExpr()
    e = AssignOp{
      Target: e,
      Op: op,
      Value: other
    }
  }
  return e
}

func ParseExpr() Expr {
  return ParseAssignExpr();
}

func ParseStatement() Stmt {
  choose {
    /"return"/
    EndKeyword();
    S();
    var expr Expr
    question {
      expr = ParseExpr()
      S();
    }
    /";"/
    return Return{Expr: expr}
  } or {
    return ParseExpr()
  }
}

func ParseStatementList() []Stmt {
  stmts := []Stmt{}
  question {
    stmts = append(stmts, ParseStatement())
    star {
      S()
      stmts = append(stmts, ParseStatement())
    }
  }
  return stmts
}

func ParseFuncDecl() FuncDecl {
  /"func"/
  EndKeyword()
  S()
  name := Id()
  S()
  /"("/
  S()
  /")"/
  S()
  /"{"/
  S()
  body := ParseStatementList()
  S()
  /"}"/
  return FuncDecl {
    Name: name,
    Body: body
  }
}