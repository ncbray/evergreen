func LineTerminator() {
  /"\n"|"\r\n"|"\r"/;
}

func S() {
  star {
    choose {
      /[ \t]/;
    } or {
      LineTerminator();
    } or {
      /"//" [^\n\r]*/;
    }
  }
}

func EndKeyword() {
  /![a-zA-Z_0-9]/;
}

func Ident() Id {
  p := position();
  // Don't allow keywords as identifiers.
  /!(("func"|"test"|"struct"|"implements"|"star"|"plus"|"choose"|"or"|"question"|"if"|"else"|"return"|"var"|"true"|"false"|"nil") ![a-zA-Z_0-9])/;
  text := /[a-zA-Z_][a-zA-Z_0-9]*/;
  return Id{Pos: p, Text: text};
}

func ParseNumericLiteral() ASTExpr{
  var value int;
  divisor := 1;
  begin := position();
  plus {
    digit := coerce(int, $[0-9]) - coerce(int, '0');
    value = value * 10 + digit;
  }
  question {
    /[.]/;
    plus {
      digit = coerce(int, $[0-9]) - coerce(int, '0');
      value = value * 10 + digit;
      divisor = divisor * 10;
    }
  }
  end := position();
  text := slice(begin, end);
  if divisor > 1 {
    return Float32Literal{Text: text, Value: coerce(float32, value) / coerce(float32, divisor)};
  } else {
    return IntLiteral{Text: text, Value: value};
  }
}

func EscapedChar() rune {
  choose {
    /[a]/;
    return '\a';
  } or {
    /[b]/;
    return '\b';
  } or {
    /[f]/;
    return '\f';
  } or {
    /[n]/;
    return '\n';
  } or {
    /[r]/;
    return '\r';
  } or {
    /[t]/;
    return '\t';
  } or {
    /[v]/;
    return '\v';
  } or {
    /[\\]/;
    return '\\';
  } or {
    /[']/;
    return '\'';
  } or {
    /[\"]/;
    return '\"';
  }
}

func DecodeString() string {
  /[\"]/;
  contents := []rune{};
  star {
    choose {
      contents = append(contents, $[^\"\\]);
    } or {
      /[\\]/;
      contents = append(contents, EscapedChar());
    }
  }
  /[\"]/;
  return coerce(string, contents);
}

func DecodeRune() (rune, string) {
  var value rune;
  begin := position();
  /[']/;
  choose {
    value = $[^\\'];
  } or {
    /[\\]/;
    value = EscapedChar();
  }
  /[']/;
  end := position();
  return value, slice(begin, end);
}

func DecodeBool() (bool, string) {
  var value bool;
  begin := position();
  choose {
    /"true"/;
    value = true;
  } or {
    /"false"/;
    value = false;
  }
  EndKeyword();
  end := position();
  return value, slice(begin, end);
}

func ParseStringLiteral() StringLiteral {
  begin := position();
  value := DecodeString();
  end := position();
  return StringLiteral{Pos: begin, Text: slice(begin, end), Value: value};
}

func Literal() ASTExpr {
  choose {
    value, text := DecodeRune();
    return RuneLiteral{Text: text, Value: value};
  } or {
    return ParseStringLiteral();
  } or {
    return ParseNumericLiteral();
  } or {
    value, text := DecodeBool();
    return BoolLiteral{Text: text, Value: value};
  } or {
    /"nil"/;
    return NilLiteral{};
  }
}

func BinaryOperator() (string, int) {
  var op string;
  var prec int;
  choose {
    return /[*/%]/, 5;
  } or {
    return /[+\-]/, 4;
  } or {
    return /([<>][=]?)|([!=][=])/, 3;
  }
}

func StringMatchExpr() StringMatch {
  /[/]/;
  S();
  e := ParseMatchChoice();
  S();
  /[/]/;
  return StringMatch{Match: e};
}

func RuneMatchExpr() RuneMatch {
  /[$]/;
  S();
  e := MatchRune();
  return RuneMatch{Match: e};
}

func ParseStructTypeRef() ASTTypeRef {
  choose {
    pkg := Ident();
    S();
    /[.]/;
    S();
    return QualifiedTypeRef{
      Package: pkg,
      Name: Ident()
    };
  } or {
    return TypeRef{Name: Ident()};
  }
}

func ParseListTypeRef() ListTypeRef {
    /[\[][\]]/;
    return ListTypeRef{Type: ParseTypeRef()};
}

func ParseTypeRef() ASTTypeRef {
  choose {
    return ParseStructTypeRef();
  } or {
    return ParseListTypeRef();
  }
}

func ParseDestructure() Destructure {
  choose {
    t := ParseStructTypeRef();
    S();
    /[{]/;
    S();
    fields := []DestructureField{};
    star {
      name := Ident();
      S();
      /[:]/;
      S();
      d := ParseDestructure();
      S();
      fields = append(fields, DestructureField{Name: name, Destructure: d});
    }
    /[}]/;
    return DestructureStruct{Type: t, Args: fields};
  } or {
    t := ParseListTypeRef();
    S();
    /[{]/;
    S();
    fields := []Destructure{};
    star {
      fields = append(fields, ParseDestructure());
      S();
    }
    /[}]/;
    return DestructureList{Type: t, Args: fields};
  } or {
    return DestructureValue{Expr: Literal()};
  }
}

func ParseRuneFilterRune() rune {
  choose {
    return $[^\]\-\\];
  } or {
    /[\\]/;
    choose {
      return EscapedChar();
    } or {
      return $[^];
    }
  }
}

func ParseRuneFilter() RuneFilter {
  min := ParseRuneFilterRune();
  max := min;
  question {
    /[\-]/;
    max = ParseRuneFilterRune();
  }
  return RuneFilter{Min: min, Max: max};
}

func MatchRune() RuneRangeMatch {
  /[\[]/;
  invert := false;
  filters := []RuneFilter{};
  question {
    /[\^]/;
    invert = true;
  }
  star {
    filters = append(filters, ParseRuneFilter());
  }
  /[\]]/;
  return RuneRangeMatch{Invert: invert, Filters: filters};
}

func Atom() TextMatch {
  choose {
    return MatchRune();
  } or {
    value := DecodeString();
    return StringLiteralMatch{Value: value};
  } or {
    /[(]/;
    S();
    e := ParseMatchChoice();
    S();
    /[)]/;
    return e;
  }
}

func MatchPostfix() TextMatch {
  e := Atom();
  choose {
    S();
    /[*]/;
    return MatchRepeat{Match: e, Min: 0};
  } or {
    S();
    /[+]/;
    return MatchRepeat{Match: e, Min: 1};
  } or {
    S();
    /[?]/;
    return MatchChoice{Matches: []TextMatch{e, MatchSequence{Matches: []TextMatch{}}}};
  } or {
    return e;
  }
}

func MatchPrefix() TextMatch {
  choose {
    var invert bool;
    choose {
      /[!]/;
      invert = true;
    } or {
      /[&]/;
    }
    S();
    return MatchLookahead{Invert: invert, Match: MatchPostfix()};
  } or {
    return MatchPostfix();
  }
}

func Sequence() TextMatch {
  e := MatchPrefix();
  choose {
    l := []TextMatch{e};
    plus {
      S();
      l = append(l, MatchPrefix());
    }
    return MatchSequence{Matches: l};
  } or {
    return e;
  }
}

func ParseMatchChoice() TextMatch {
  e := Sequence();
  choose {
    l := []TextMatch{e};
    plus {
      S();
      /[|]/;
      S();
      l = append(l, Sequence());
    }
    return MatchChoice{Matches: l};
  } or {
    return e;
  }
}

func ParseExprList() []ASTExpr {
  exprs := []ASTExpr{};
  question {
    exprs = append(exprs, ParseExpr());
    star {
      S();
      /[,]/;
      S();
      exprs = append(exprs, ParseExpr());
    }
  }
  return exprs;
}

func ParseTargetList() []ASTExpr {
  exprs := []ASTExpr{ParseNameRef()};
  star {
    S();
    /[,]/;
    S();
    exprs = append(exprs, ParseNameRef());
  }
  return exprs;
}

func ParseNamedExpr() NamedExpr {
  name := Ident();
  S();
  /[:]/;
  S();
  return NamedExpr{Name: name, Expr: ParseExpr()};
}

func ParseNamedExprList() []NamedExpr {
  exprs := []NamedExpr{};
  question {
    exprs = append(exprs, ParseNamedExpr());
    star {
      S();
      /[,]/;
      S();
      exprs = append(exprs, ParseNamedExpr());
    }
  }
  return exprs;
}


func ParseReturnTypeList() []ASTTypeRef {
  choose {
    return ParseParenthTypeList();
  } or {
    return []ASTTypeRef{ParseTypeRef()};
  } or {
    return []ASTTypeRef{};
  }
}

func PrimaryExpr() ASTExpr {
  choose {
    return Literal();
  } or {
    /"coerce"/;
    EndKeyword();
    S();
    /[(]/;
    S();
    t := ParseTypeRef();
    S();
    /[,]/;
    S();
    e := ParseExpr();
    S();
    /[)]/;
    return Coerce{Type: t, Expr: e};
  } or {
    t := ParseStructTypeRef();
    S();
    /[{]/;
    S();
    args := ParseNamedExprList();
    S();
    /[}]/;
    return Construct{Type: t, Args: args};
  } or {
    t := ParseListTypeRef();
    S();
    /[{]/;
    S();
    args := ParseExprList();
    S();
    /[}]/;
    return ConstructList{Type: t, Args: args};
  } or {
    return StringMatchExpr();
  } or {
    return RuneMatchExpr();
  } or {
    /[(]/;
    S();
    e := ParseExpr();
    S();
    /[)]/;
    return e;
  } or {
    return ParseNameRef();
  }
}

func ParseNameRef() NameRef {
    return NameRef{Name: Ident()};
}

func PrimaryExprPostfix() ASTExpr {
  e := PrimaryExpr();
  star {
    S();
    pos := position();
    choose {
      /[(]/;
      S();
      args := ParseExprList();
      S();
      /[)]/;
      e = Call{Expr: e, Pos: pos, Args: args};
    } or {
      /[.]/;
      S();
      name := Ident();
      e = Selector{Expr: e, Pos: pos, Name: name};
    } or {
      /[<]/;
      S();
      types := ParseTypeList();
      S();
      /[>]/;
      e = SpecializeTemplate{Expr: e, Pos: pos, Types: types};
    }
  }
  return e;
}

// Uses precedence climbing.
func ParseBinaryOp(min_prec int) ASTExpr {
  e := PrimaryExprPostfix();
  star {
    S();
    // TODO associativity
    opPos := position();
    op, prec := BinaryOperator();
    if prec < min_prec {
      fail;
    }
    S();
    r := ParseBinaryOp(prec + 1);
    e = BinaryOp{
      Left: e,
      Op: op,
      OpPos: opPos,
      Right: r
    };
  }
  return e;
}

func ParseExpr() ASTExpr {
     return ParseBinaryOp(1);
}

func ParseCompoundStatement() ASTExpr {
  choose {
    /"star"/;
    EndKeyword();
    S();
    block := ParseCodeBlock();
    return Repeat{Block: block, Min: 0};
  } or {
    /"plus"/;
    EndKeyword();
    S();
    block := ParseCodeBlock();
    return Repeat{Block: block, Min: 1};
  } or {
    /"choose"/;
    EndKeyword();
    S();
    blocks := [][]ASTExpr{ParseCodeBlock()};
    plus {
      S();
      /"or"/;
      EndKeyword();
      S();
      blocks = append(blocks, ParseCodeBlock());
    }
    return Choice{Blocks: blocks};
  } or {
    /"question"/;
    EndKeyword();
    S();
    block := ParseCodeBlock();
    return Optional{Block: block};
  } or {
    /"if"/;
    EndKeyword();
    S();
    expr := ParseExpr();
    S();
    block := ParseCodeBlock();
    else_ := []ASTExpr{};
    question {
      S();
      /"else"/;
      EndKeyword();
      S();
      else_ = ParseCodeBlock();
    }
    return If{Expr: expr, Block: block, Else: else_};
  }
}

func EOS() {
  S();
  /[;]|&[)}]/;
}

func ParseStatement() ASTExpr {
  choose {
    return ParseCompoundStatement();
  } or {
    pos := position();
    /"var"/;
    EndKeyword();
    S();
    name := ParseNameRef();
    S();
    t := ParseTypeRef();
    var expr ASTExpr;
    question {
      S();
      /[=]/;
      S();
      expr = ParseExpr(); 
    }
    EOS();
    return Assign{
      Expr: expr,
      Pos: pos, // HACK?
      Targets: []ASTExpr{name},
      Type: t,
      Define: true
    };
  } or {
    /"fail"/;
    EndKeyword();
    EOS();
    return Fail{};
  } or {
    pos := position();
    /"return"/;
    EndKeyword();
    S();
    exprs := ParseExprList();
    EOS();
    return Return{Pos: pos, Exprs: exprs};
  } or {
    names := ParseTargetList();
    S();
    pos := position();
    var defined bool;
    choose {
      /":="/;
      defined = true;
    } or {
      /"="/;
    }
    S();
    expr := ParseExpr();
    EOS();
    return Assign{
      Expr: expr,
      Pos: pos,
      Targets: names,
      Define: defined
    };
  } or {
    e := ParseExpr();
    EOS();
    return e;
  }
}

func ParseCodeBlock() []ASTExpr {
  /[{]/;
  S();
  exprs := []ASTExpr{};
  star {
    exprs = append(exprs, ParseStatement());
    S();
  }
  /[}]/;
  return exprs;
}

func ParseTypeList() []ASTTypeRef {
  types := []ASTTypeRef{};
  question {
    types = append(types, ParseTypeRef());
    star {
      S();
      /[,]/;
      S();
      types = append(types, ParseTypeRef());
    }
  }
  return types;
}

func ParseParenthTypeList() []ASTTypeRef {
  /[(]/;
  S();
  types := ParseTypeList();
  S();
  /[)]/;
  return types;
}

func ParseStructDecl() StructDecl {
  /"struct"/;
  EndKeyword();
  S();
  name := Ident();
  S();

  scoped := false;
  question {
    /"scoped"/;
    EndKeyword();
    S();
    scoped = true;
  }

  contains := []ASTTypeRef{};
  question {
    /"contains"/;
    EndKeyword();
    S();
    contains = ParseParenthTypeList();
    S();
  }

  var impl ASTTypeRef;
  question {
    /"implements"/;
    EndKeyword();
    S();
    impl = ParseTypeRef();
    S();
  }

  /[{]/;
  S();
  fields := []FieldDecl{};
  star {
    fn := Ident();
    S();
    ft := ParseTypeRef();
    S();
    fields = append(fields, FieldDecl{Name: fn, Type: ft});
  }
  /[}]/;
  return StructDecl{
    Name: name,
    Implements: impl,
    Fields: fields,
    Scoped: scoped,
    Contains: contains
  };
}

func ParseParam() Param {
     name := Ident();
     S();
     type := ParseTypeRef();
     return Param{Name: name, Type: type};
}

func ParseParamList() []Param {
  params := []Param{};
  question {
    params = append(params, ParseParam());
    star {
      S();
      /[,]/;
      S();
      params = append(params, ParseParam());
    }
  }
  return params;
}

func ParseFuncDecl() FuncDecl {
  /"func"/;
  EndKeyword();
  S();
  name := Ident();
  S();
  /"("/;
  S();
  params := ParseParamList();
  S();
  /")"/;
  S();
  retTypes := ParseReturnTypeList();
  S();
  block := ParseCodeBlock();
  return FuncDecl{Name: name, Params: params, ReturnTypes: retTypes, Block: block};
}

func ParseMatchState() string {
  choose {
    text := /"NORMAL"|"FAIL"/;
    EndKeyword();
    return text;
  } or {
    return "NORMAL";
  }
}

func ParseTest() Test {
  /"test"/;
  EndKeyword();
  S();
  name := Ident();
  S();
  rule := ParseExpr();
  S();
  input := DecodeString();
  S();
  flow := ParseMatchState();
  S();
  d := ParseDestructure();
  return Test{Name: name, Rule: rule, Input: input, Flow: flow, Destructure: d};
}

func ParseImports() []ImportDecl {
  imports := []ImportDecl{};
  question {
    /"import"/;
    EndKeyword();
    S();
    /"("/;
    S();
    star {
      imports = append(imports, ImportDecl{
        Path: ParseStringLiteral()
      });
      S();
    }
    /")"/;
  }
  return imports;
}

func ParseFile() File {
  decls := []ASTDecl{};
  tests := []Test{};

  // Leading whitespace
  S();

  imports := ParseImports();
  S();

  star {
    choose {
      decls = append(decls, ParseFuncDecl());
    } or {
      decls = append(decls, ParseStructDecl());
    } or {
      tests = append(tests, ParseTest());
    }
    S();
  }
  /![^]/;
  return File{Imports: imports, Decls: decls, Tests: tests};
}
